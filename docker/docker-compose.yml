services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    pull_policy: always
    environment:
      POSTGRES_DB: the0_oss
      POSTGRES_USER: the0
      POSTGRES_PASSWORD: the0_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U the0 -d the0_oss"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - the0-network

  # MongoDB Database (for bot-runner)
  mongo:
    image: mongo:7-jammy
    pull_policy: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: the0_mongo_password
      MONGO_INITDB_DATABASE: bot_runner
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD-SHELL", "mongosh --eval 'db.runCommand(\"ping\")' --quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - the0-network

  # NATS Message Broker with JetStream
  nats:
    image: nats:2.10-alpine
    pull_policy: always
    command: ["-js", "-m", "8222", "--store_dir", "/data"]
    volumes:
      - nats_data:/data
    ports:
      - "4222:4222"  # NATS port
      - "8222:8222"  # HTTP monitoring port
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8222/"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - the0-network

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio:latest
    pull_policy: always
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: the0admin
      MINIO_ROOT_PASSWORD: the0password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"  # API port
      - "9001:9001"  # Console port
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - the0-network

  # The0 API Service (TypeScript/NestJS)
  the0-api:
    build: 
      context: ../api
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    environment:
      # Database configuration
      DATABASE_URL: postgresql://the0:the0_password@postgres:5432/the0_oss?sslmode=disable
      DATABASE_TYPE: postgres
      
      # NATS configuration
      NATS_URLS: nats://nats:4222
      
      
      # MinIO configuration
      MINIO_ENDPOINT: minio # Internal endpoint hostname for API to connect to MinIO
      MINIO_EXTERNAL_ENDPOINT: localhost:9000 # External endpoint for signed URLs from browser
      MINIO_PORT: "9000"
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: the0admin
      MINIO_SECRET_KEY: the0password
      
      # Application configuration
      NODE_ENV: production
      PORT: 3000
      API_BASE_URL: http://localhost:3000
      
      # Frontend configuration
      FRONTEND_URL: http://localhost:3001
      
      # JWT configuration
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 24h
      
      # Storage configuration
      STORAGE_PATH: /app/uploads/custom-bots
      CUSTOM_BOTS_BUCKET: custom-bots
      LOG_BUCKET: bot-logs
      BACKTEST_BUCKET: backtests
      
      # Bot API configuration (used by frontend API routes)
      BOT_API_URL: http://the0-api:3000
      
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - the0-network

  # Bot Runner Master Service (Go - coordinates workers and serves HTTP API)
  bot-runner-master:
    build: 
      context: ../runtime
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    environment:
      # MongoDB configuration
      MONGO_URI: mongodb://root:the0_mongo_password@mongo:27017
      
      # MinIO configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: the0admin
      MINIO_SECRET_KEY: the0password
      MINIO_USE_SSL: "false"
      MINIO_LOGS_BUCKET: bot-logs
      MINIO_CODE_BUCKET: custom-bots
      MINIO_REGION: us-east-1
      
      # Worker ID (will be auto-generated if not set)
      WORKER_ID: bot-runner-master-1
      
      # Partition configuration
      MAX_BOTS_PER_PARTITION: "10"
      
    ports:
      - "8080:8080"  # HTTP health endpoint
      - "50051:50051"  # gRPC port (bot-runner default)
    volumes:
      - bot_runner_data:/app/data
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - the0-network
    command: ["./runtime", "bot-runner", "master"]

  # Bot Runner Worker Service (Go - executes bots with Docker)
  bot-runner-worker:
    build: 
      context: ../runtime
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    deploy:
      replicas: 4
    environment:
      # MongoDB configuration
      MONGO_URI: mongodb://root:the0_mongo_password@mongo:27017
      
      # NATS configuration
      NATS_URL: nats://nats:4222
      
      # MinIO configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: the0admin
      MINIO_SECRET_KEY: the0password
      MINIO_USE_SSL: "false"
      MINIO_LOGS_BUCKET: bot-logs
      MINIO_CODE_BUCKET: custom-bots
      MINIO_REGION: us-east-1
      
      # Worker configuration
      # WORKER_ID will be auto-generated for each replica
      MASTER_SERVICE: bot-runner-master
      
      # Partition configuration
      MAX_BOTS_PER_PARTITION: "10"
      
      # Docker configuration
      DOCKER_TEMP_DIR: /tmp/bot-runner
      TEMP_DIR: /tmp/bot-runner
      DOCKER_LOG_DIR: /var/log/bot-runner
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker-in-Docker
      - bot_runner_worker_data:/app/data
      - /tmp/bot-runner:/tmp/bot-runner
    privileged: true  # Required for Docker-in-Docker
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      bot-runner-master:
        condition: service_healthy
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - the0-network
    command: ["./runtime", "bot-runner", "worker"]

  # Backtest Runner Master Service (Go - coordinates workers and serves HTTP API)
  backtest-runner-master:
    build: 
      context: ../runtime
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    environment:
      # MongoDB configuration
      MONGO_URI: mongodb://root:the0_mongo_password@mongo:27017
      
      # NATS configuration
      NATS_URL: nats://nats:4222
      
      # MinIO configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: the0admin
      MINIO_SECRET_KEY: the0password
      MINIO_USE_SSL: "false"
      MINIO_LOGS_BUCKET: logs
      MINIO_CODE_BUCKET: custom-bots
      MINIO_BACKTESTS_BUCKET: backtests
      MINIO_REGION: us-east-1
      
      # Worker ID (will be auto-generated if not set)
      WORKER_ID: backtest-runner-master-1
      
      # Partition configuration
      MAX_BACKTESTS_PER_PARTITION: "10"
      
    ports:
      - "8081:8080"  # HTTP API port (external:internal)
      - "50052:50052"  # gRPC port (backtest-runner default)
    volumes:
      - backtest_runner_data:/app/data
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - the0-network
    command: ["./runtime", "backtest-runner", "standalone", "--node=master"]

  # Backtest Runner Worker Service (Go - executes backtests with Docker)
  backtest-runner-worker:
    build: 
      context: ../runtime
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    deploy:
      replicas: 4
    environment:
      # MongoDB configuration
      MONGO_URI: mongodb://root:the0_mongo_password@mongo:27017
      
      # NATS configuration
      NATS_URL: nats://nats:4222
      
      # MinIO configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: the0admin
      MINIO_SECRET_KEY: the0password
      MINIO_USE_SSL: "false"
      MINIO_LOGS_BUCKET: backtest-logs
      MINIO_CODE_BUCKET: custom-bots
      MINIO_BACKTESTS_BUCKET: backtests
      MINIO_REGION: us-east-1
      
      # Worker configuration
      # WORKER_ID will be auto-generated for each replica
      MASTER_HOST: backtest-runner-master
      
      # Batch configuration
      BATCH_SIZE: "5"
      BATCH_TIMEOUT: "300"
      BATCH_INTERVAL: "10"
      
      # Partition configuration
      MAX_BACKTESTS_PER_PARTITION: "10"
      
      # Docker configuration
      DOCKER_TEMP_DIR: /tmp/backtest-runner
      TEMP_DIR: /tmp/backtest-runner
      DOCKER_LOG_DIR: /var/log/backtest-runner
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker-in-Docker
      - backtest_runner_worker_data:/app/data
      - /tmp/backtest-runner:/tmp/backtest-runner
    privileged: true  # Required for Docker-in-Docker
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      backtest-runner-master:
        condition: service_healthy
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - the0-network
    command: ["./runtime", "backtest-runner", "standalone", "--node=worker"]

  # Bot Scheduler Master Service (Go - coordinates workers and schedules bots)
  bot-scheduler-master:
    build: 
      context: ../runtime
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    environment:
      # MongoDB configuration
      MONGO_URI: mongodb://root:the0_mongo_password@mongo:27017
      
      # MinIO configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: the0admin
      MINIO_SECRET_KEY: the0password
      MINIO_USE_SSL: "false"
      MINIO_LOGS_BUCKET: bot-logs
      MINIO_CODE_BUCKET: custom-bots
      
      # Worker ID (will be auto-generated if not set)
      WORKER_ID: bot-scheduler-master-1
      
      # Partition configuration
      MAX_BOT_SCHEDULE_PER_PARTITION: "10"
      
    ports:
      - "8082:8080"  # HTTP API port (external:internal)
      - "50053:50053"  # gRPC port (bot-scheduler default)
    volumes:
      - bot_scheduler_data:/app/data
    depends_on:
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - the0-network
    command: ["./runtime", "bot-scheduler", "master"]

  # Bot Scheduler Worker Service (Go - executes scheduled bots with Docker)
  bot-scheduler-worker:
    build: 
      context: ../runtime
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    deploy:
      replicas: 4
    environment:
      # MongoDB configuration
      MONGO_URI: mongodb://root:the0_mongo_password@mongo:27017  
      # NATS configuration
      NATS_URL: nats://nats:4222
      
      # MinIO configuration
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: the0admin
      MINIO_SECRET_KEY: the0password
      MINIO_USE_SSL: "false"
      MINIO_LOGS_BUCKET: bot-logs
      MINIO_CODE_BUCKET: custom-bots
      
      # Worker configuration
      # WORKER_ID will be auto-generated for each replica
      MASTER_SERVICE: bot-scheduler-master
      
      # Partition configuration
      MAX_BOT_SCHEDULE_PER_PARTITION: "10"
      
      # Docker configuration
      DOCKER_TEMP_DIR: /tmp/bot-scheduler
      TEMP_DIR: /tmp/bot-scheduler
      DOCKER_LOG_DIR: /var/log/bot-scheduler
      BOT_MEMORY_LIMIT_MB: "512"
      BOT_CPU_SHARES: "512"
      
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Docker-in-Docker
      - bot_scheduler_worker_data:/app/data
      - /tmp/bot-scheduler:/tmp/bot-scheduler
    privileged: true  # Required for Docker-in-Docker
    sysctls:
      - net.ipv4.ip_forward=1
    depends_on:
      bot-scheduler-master:
        condition: service_healthy
      mongo:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - the0-network
    command: ["./runtime", "bot-scheduler", "worker"]

  the0-frontend:
    build: 
      context: ../frontend
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    environment:
      # API configuration
      NEXT_PUBLIC_API_URL: http://localhost:3000
      BOT_API_URL: http://the0-api:3000
      
      # CLI download configuration
      CLI_DOWNLOAD_BASE_URL: https://github.com/your-org/the0-oss/releases/download
      CLI_INSTALL_BASE_URL: http://localhost:3001
      NEXT_PUBLIC_CLI_INSTALL_BASE_URL: http://localhost:3001
      
      # JWT configuration (for admin auth middleware)
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      
      # App configuration
      NEXT_PUBLIC_APP_NAME: "the0"
      NEXT_PUBLIC_APP_VERSION: "1.0.0"
      NEXT_BASE_URL: http://localhost:3001
      
      NODE_ENV: production
      
    ports:
      - "3001:3000"
    depends_on:
      the0-api:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - the0-network

  # Development tools (optional)
  adminer:
    image: adminer:4.8.1
    pull_policy: always
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    profiles:
      - dev
    networks:
      - the0-network

  # 0vers33r Security Analysis Service
  the0-analyzer:
    build:
      context: ../services/0vers33r
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    pull_policy: always
    environment:
      # NATS configuration
      NATS_URL: nats://nats:4222
      
      # MinIO configuration  
      MINIO_ENDPOINT: minio:9000
      MINIO_USE_SSL: "false"
      MINIO_ACCESS_KEY: the0admin
      MINIO_SECRET_KEY: the0password
      CUSTOM_BOTS_BUCKET: custom-bots
      
      # PostgreSQL configuration
      DATABASE_URL: postgresql://the0:the0_password@postgres:5432/the0_oss
      
      # AI Analysis configuration (optional)
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      AI_SYSTEM_PROMPT: ${AI_SYSTEM_PROMPT:-}
      
      # Service configuration
      PYTHONPATH: /app
      PYTHONUNBUFFERED: "1"
      
    depends_on:
      postgres:
        condition: service_healthy
      nats:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import asyncio; from src.services.nats_client import NATSClient; asyncio.run(NATSClient().connect())' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - the0-network

  # NATS monitoring (optional)
  nats-monitoring:
    image: natsio/nats-box:latest
    pull_policy: always
    command: ["nats", "server", "check", "connection", "--server=nats://nats:4222"]
    depends_on:
      - nats
    profiles:
      - dev
    networks:
      - the0-network

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  nats_data:
    driver: local
  minio_data:
    driver: local
  bot_runner_data:
    driver: local
  bot_runner_worker_data:
    driver: local
  backtest_runner_data:
    driver: local
  backtest_runner_worker_data:
    driver: local
  bot_scheduler_data:
    driver: local
  bot_scheduler_worker_data:
    driver: local

networks:
  the0-network:
    driver: bridge
    name: the0-oss-network