/*
   Common Python Exploit Patterns
   Frequently seen exploitation techniques in Python malware
   Severity: HIGH/MEDIUM - Common attack vectors
*/

rule Python_Reverse_Shell_Patterns {
    meta:
        description = "Detects common Python reverse shell patterns"
        severity = "high"
        author = "0VERS33R"

    strings:
        // Socket-based reverse shells
        $socket_connect = "socket.socket(socket.AF_INET, socket.SOCK_STREAM)" nocase
        $connect_call = ".connect((" nocase
        $shell_exec = "/bin/sh" nocase
        $cmd_exec = "cmd.exe" nocase

        // Subprocess reverse shells
        $subprocess_shell = "subprocess.call([" nocase
        $subprocess_popen = "subprocess.Popen(" nocase
        $shell_redirect = "shell=True" nocase

        // Classic reverse shell patterns
        $nc_reverse = "nc -e" nocase
        $bash_reverse = "bash -i" nocase
        $python_reverse = "python -c" nocase

        // PowerShell reverse shells (from Python)
        $powershell_invoke = "powershell -c" nocase
        $powershell_encoded = "powershell -enc" nocase

    condition:
        ($socket_connect and $connect_call and ($shell_exec or $cmd_exec)) or
        ($subprocess_shell or $subprocess_popen) and $shell_redirect or
        any of ($nc_reverse, $bash_reverse, $python_reverse, $powershell_invoke, $powershell_encoded) or
        ($socket_connect and $subprocess_popen and $shell_redirect) or
        ($powershell_invoke and $powershell_encoded)
}

rule Python_Web_Shell_Patterns {
    meta:
        description = "Detects Python web shell implementations"
        severity = "critical"
        author = "0VERS33R"

    strings:
        // Web framework usage
        $flask_app = "from flask import" nocase
        $django_http = "from django.http import" nocase
        $bottle_route = "from bottle import" nocase
        $tornado_web = "import tornado.web" nocase

        // Command execution in web context
        $request_args = "request.args" nocase
        $request_form = "request.form" nocase
        $get_parameter = ".GET[" nocase
        $post_parameter = ".POST[" nocase

        // Dangerous web operations
        $web_exec = "exec(" nocase
        $web_eval = "eval(" nocase
        $web_subprocess = "subprocess." nocase
        $web_os_system = "os.system(" nocase

        // File upload handling
        $file_upload = "request.files" nocase
        $save_file = ".save(" nocase
        $werkzeug_upload = "werkzeug" nocase

    condition:
        (
            ($flask_app and (any of ($web_exec, $web_eval, $web_subprocess, $web_os_system))) or
            (any of ($django_http, $bottle_route, $tornado_web) and (any of ($web_exec, $web_eval, $web_subprocess, $web_os_system))) or
            ((any of ($request_args, $request_form, $get_parameter, $post_parameter)) and (any of ($web_exec, $web_eval, $web_subprocess, $web_os_system))) or
            ((any of ($file_upload, $save_file, $werkzeug_upload)) and (any of ($web_exec, $web_eval, $web_subprocess, $web_os_system)))
        )
}

rule Python_Credential_Stealer_Patterns {
    meta:
        description = "Detects Python credential stealing patterns"
        severity = "high"
        author = "0VERS33R"

    strings:
        // Browser credential locations
        $chrome_login = "Login Data" nocase
        $firefox_logins = "logins.json" nocase
        $safari_keychain = "Keychain" nocase
        $edge_login = "Microsoft/Edge" nocase

        // Database operations on browser files
        $sqlite3_connect = "sqlite3.connect(" nocase
        $execute_query = ".execute(" nocase
        $fetchall = ".fetchall(" nocase

        // Credential extraction queries
        $password_query = "SELECT * FROM logins" nocase
        $cookie_query = "SELECT * FROM cookies" nocase
        $form_data = "SELECT * FROM autofill" nocase

        // Encryption/decryption for browser data
        $win32crypt = "win32crypt" nocase
        $decrypt_data = "CryptUnprotectData" nocase
        $aes_decrypt = "AES.new(" nocase

        // Common credential files
        $passwords_txt = "passwords.txt" nocase
        $credentials_file = "credentials" nocase
        $stolen_data = "stolen" nocase

    condition:
        (any of ($chrome_login, $firefox_logins, $safari_keychain, $edge_login)) and
        ($sqlite3_connect and $execute_query) and
        (any of ($password_query, $cookie_query, $form_data) or
         any of ($win32crypt, $decrypt_data, $aes_decrypt)) and
        (any of ($passwords_txt, $credentials_file, $stolen_data)) or
        (any of ($sqlite3_connect, $execute_query, $fetchall) and
         any of ($password_query, $cookie_query, $form_data) and
         any of ($win32crypt, $decrypt_data, $aes_decrypt) and
         any of ($passwords_txt, $credentials_file, $stolen_data))
}

rule Python_Botnet_C2_Patterns {
    meta:
        description = "Detects Python botnet command and control patterns"
        severity = "high"
        author = "0VERS33R"

    strings:
        // Network communication
        $requests_get = "requests.get(" nocase
        $requests_post = "requests.post(" nocase
        $urllib_urlopen = "urllib.urlopen(" nocase
        $socket_connect = "socket.connect(" nocase

        // C2 communication patterns
        $command_control = "command" nocase
        $bot_id = "bot_id" nocase
        $heartbeat = "heartbeat" nocase
        $check_in = "checkin" nocase

        // Command execution
        $execute_command = "execute" nocase
        $run_command = "run_cmd" nocase
        $shell_command = "shell" nocase
        $system_call = "system(" nocase

        // Persistence and stealth
        $loop_forever = "while True:" nocase
        $sleep_interval = "time.sleep(" nocase
        $error_handling = "try:" nocase
        $except_pass = "except:" nocase

        // Data exfiltration
        $upload_data = "upload" nocase
        $send_data = "send_data" nocase
        $post_data = "post(" nocase

    condition:
        (any of ($requests_get, $requests_post, $urllib_urlopen, $socket_connect)) and
        (any of ($command_control, $bot_id, $heartbeat, $check_in)) and
        (any of ($execute_command, $run_command, $shell_command, $system_call)) and
        ($loop_forever and $sleep_interval) and
        (any of ($error_handling, $except_pass) or
         any of ($upload_data, $send_data, $post_data))
}

rule Python_Cryptocurrency_Stealer {
    meta:
        description = "Detects Python cryptocurrency wallet stealers"
        severity = "high"
        author = "0VERS33R"

    strings:
        // Wallet file locations
        $bitcoin_wallet = "wallet.dat" nocase
        $ethereum_keystore = "keystore" nocase
        $monero_wallet = "monero" nocase
        $litecoin_wallet = "litecoin" nocase

        // Wallet directories
        $bitcoin_dir = "Bitcoin" nocase
        $ethereum_dir = "Ethereum" nocase
        $exodus_dir = "Exodus" nocase
        $electrum_dir = "Electrum" nocase

        // Cryptocurrency patterns
        $private_key = "private_key" nocase
        $seed_phrase = "seed" nocase
        $mnemonic = "mnemonic" nocase
        $wallet_address = "address" nocase

        // File operations on wallets
        $copy_wallet = "shutil.copy" nocase
        $read_wallet = "open(" nocase
        $wallet_backup = "backup" nocase

        // Cryptocurrency APIs
        $blockchain_api = "blockchain.info" nocase
        $coinbase_api = "coinbase" nocase
        $binance_api = "binance" nocase

    condition:
        (any of ($bitcoin_wallet, $ethereum_keystore, $monero_wallet, $litecoin_wallet) or
         any of ($bitcoin_dir, $ethereum_dir, $exodus_dir, $electrum_dir)) and
        (any of ($private_key, $seed_phrase, $mnemonic, $wallet_address)) and
        (any of ($copy_wallet, $read_wallet, $wallet_backup) or
         any of ($blockchain_api, $coinbase_api, $binance_api))
}

rule Python_RAT_Remote_Access_Trojan {
    meta:
        description = "Detects Python Remote Access Trojan patterns"
        severity = "high"
        author = "0VERS33R"

    strings:
        // Remote access capabilities
        $remote_desktop = "remote" nocase
        $vnc_server = "vnc" nocase
        $rdp_connection = "rdp" nocase
        $teamviewer = "teamviewer" nocase

        // File transfer capabilities
        $file_upload = "upload" nocase
        $file_download = "download" nocase
        $file_transfer = "transfer" nocase
        $sftp_client = "sftp" nocase

        // System information gathering
        $system_info = "platform.system(" nocase
        $cpu_info = "platform.processor(" nocase
        $memory_info = "psutil.virtual_memory(" nocase
        $disk_info = "psutil.disk_usage(" nocase

        // Process manipulation
        $list_processes = "psutil.process_iter(" nocase
        $kill_process = ".kill(" nocase
        $start_process = "subprocess.Popen(" nocase

        // Registry operations (Windows)
        $registry_read = "winreg.QueryValueEx(" nocase
        $registry_write = "winreg.SetValueEx(" nocase
        $registry_enum = "winreg.EnumKey(" nocase

    condition:
        (any of ($remote_desktop, $vnc_server, $rdp_connection, $teamviewer) or
         any of ($file_upload, $file_download, $file_transfer, $sftp_client)) and
        (any of ($system_info, $cpu_info, $memory_info, $disk_info) or
         any of ($list_processes, $kill_process, $start_process) or
         any of ($registry_read, $registry_write, $registry_enum))
}

rule Python_Dropper_Downloader_Patterns {
    meta:
        description = "Detects Python dropper and downloader patterns"
        severity = "high"
        author = "0VERS33R"

    strings:
        // Download operations
        $urllib_download = "urllib.request.urlretrieve(" nocase
        $requests_download = "requests.get(" nocase
        $wget_download = "wget" nocase
        $curl_download = "curl" nocase

        // File writing operations
        $write_binary = "wb" nocase
        $write_file = ".write(" nocase
        $save_file = ".save(" nocase
        $file_output = "output" nocase

        // Execution after download
        $execute_file = "subprocess.call(" nocase
        $run_file = "os.system(" nocase
        $import_module = "__import__(" nocase
        $exec_file = "exec(open(" nocase

        // Temporary file operations
        $temp_file = "tempfile" nocase
        $tmp_dir = "/tmp/" nocase
        $temp_dir = "temp" nocase

        // URL patterns
        $http_url = "http://" nocase
        $https_url = "https://" nocase
        $ftp_url = "ftp://" nocase

    condition:
        (any of ($urllib_download, $requests_download, $wget_download, $curl_download)) and
        (any of ($write_binary, $write_file, $save_file, $file_output)) and
        (any of ($execute_file, $run_file, $import_module, $exec_file) or
         any of ($temp_file, $tmp_dir, $temp_dir)) and
        any of ($http_url, $https_url, $ftp_url)
}

rule Python_Privilege_Escalation_Patterns {
    meta:
        description = "Detects Python privilege escalation attempts"
        severity = "high"
        author = "0VERS33R"

    strings:
        // SUID/SGID exploitation
        $suid_find = "find / -perm -4000" nocase
        $sgid_find = "find / -perm -2000" nocase
        $chmod_suid = "chmod +s" nocase

        // Sudo exploitation
        $sudo_command = "sudo " nocase
        $sudoers_file = "/etc/sudoers" nocase
        $sudo_list = "sudo -l" nocase

        // Service exploitation
        $systemctl = "systemctl" nocase
        $service_restart = "service " nocase
        $init_d = "/etc/init.d/" nocase

        // Kernel exploits
        $uname_kernel = "uname -r" nocase
        $kernel_version = "platform.release(" nocase
        $exploit_kernel = "exploit" nocase

        // Cron job manipulation
        $crontab_edit = "crontab -e" nocase
        $cron_dir = "/etc/cron" nocase
        $cron_job = "cron" nocase

    condition:
        (any of ($suid_find, $sgid_find, $chmod_suid) or
         any of ($sudo_command, $sudoers_file, $sudo_list) or
         any of ($systemctl, $service_restart, $init_d) or
         any of ($uname_kernel, $kernel_version, $exploit_kernel) or
         any of ($crontab_edit, $cron_dir, $cron_job))
}

rule Python_Data_Destruction_Patterns {
    meta:
        description = "Detects Python data destruction and wiper patterns"
        severity = "critical"
        author = "0VERS33R"

    strings:
        // File deletion operations
        $recursive_delete = "shutil.rmtree(" nocase
        $force_delete = "os.remove(" nocase
        $unlink_file = "os.unlink(" nocase
        $delete_files = "glob.glob(" nocase

        // Disk wiping patterns
        $zero_fill = "\\x00" nocase
        $random_fill = "os.urandom(" nocase
        $overwrite_data = "overwrite" nocase
        $wipe_disk = "wipe" nocase

        // System destruction
        $format_drive = "format" nocase
        $delete_boot = "boot" nocase
        $mbr_destroy = "mbr" nocase
        $partition_destroy = "partition" nocase

        // Mass file operations
        $walk_filesystem = "os.walk(" nocase
        $find_all_files = "**" nocase
        $recursive_pattern = "recursive=True" nocase

        // Dangerous paths
        $system32 = "System32" nocase
        $windows_dir = "Windows" nocase
        $root_dir = "/" nocase
        $etc_dir = "/etc" nocase

    condition:
        (any of ($recursive_delete, $force_delete, $unlink_file, $delete_files)) and
        (any of ($zero_fill, $random_fill, $overwrite_data, $wipe_disk) or
         any of ($format_drive, $delete_boot, $mbr_destroy, $partition_destroy)) and
        ($walk_filesystem or $find_all_files or $recursive_pattern) and
        any of ($system32, $windows_dir, $root_dir, $etc_dir)
}

rule Python_Base64_Exec_Backdoor
{
    meta:
        description = "Detects Python backdoors using base64-encoded payloads and exec"
        severity = "critical"
        author = "0VERS33R"

    strings:
        $base64_import = "import base64" nocase
        $b64decode = "base64.b64decode" nocase
        $exec = "exec(" nocase
        $payload = /[A-Za-z0-9+\/=]{20,}/  // long base64 string

    condition:
        $base64_import and $b64decode and $exec and $payload
}